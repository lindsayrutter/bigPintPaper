library(maps)
library(mapdata)
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
par(pty="s")
mapBG1 = plotmap("Brandenburg Gate, Berlin", zoom = 15)
??plotmap
?plotmap
install.packages("RgoogleMaps")
install.packages("RgoogleMaps")
library(RgoogleMaps)
par(pty="s")
mapBG1 = plotmap("Brandenburg Gate, Berlin", zoom = 15)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
library(ggmap)
library(ggplot2)
library(maps)
library(mapdata)
usa <- map_data("usa")
usa
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
devtools::install_github("dkahle/ggmap")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
library(ggmap)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
packageVersion("ggmap")
library(ggmap)
library(ggplot2)
library(maps)
library(mapdata)
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
library(ggmap)
library(ggplot2)
library(maps)
library(mapdata)
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
register_google(key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
has_goog_key()
ggmap(
ggmap = get_map(
"Dayton",
zoom = 13, scale = "auto",
maptype = "satellite",
source = "google"),
extent = "device",
legend = "topright"
)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
sq_map
ggmap(sq_map) + geom_point(data = sisquoc, mapping = aes(x = lon, y = lat), color = "red")
sisquoc
sisquoc$lon
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
ggmap(sq_map) + geom_point(data = sisquoc, mapping = aes(x = lon, y = lat), color = "red")
?make_bbox
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 13, maptype = "satellite")
island
ggmap(island)
RL <- read.table(text = "1    17.6328    -63.27462
2    17.64614   -63.26499
3    17.64755   -63.25658
4    17.64632   -63.2519
5    17.64888   -63.2311
6    17.63113   -63.2175
7    17.61252   -63.23623
8    17.62463   -63.25958", header = F)
RL
RL <- setNames(RL, c("ID", "Latitude", "Longitude"))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-63.280, -63.20), expand = c(0, 0)) +
scale_y_continuous(limits = c(17.60, 17.66), expand = c(0, 0))
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
rm(list=ls())
dev.off()
dev.off()
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
RL <- read.table(text = "1    38.4123    -110.7835
2    38.4139   -110.7819
3    38.3997   -110.7916
4    38.3941   -110.7896
5    38.3949   -110.7869
6    38.395   -110.7852", header = F)
RL <- setNames(RL, c("ID", "Latitude", "Longitude"))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.7920, -110.7818), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3940, 38.4140), expand = c(0, 0))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.7930, -110.7798), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3940, 38.4140), expand = c(0, 0))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.8020, -110.7618), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3940, 38.4140), expand = c(0, 0))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.8020, -110.7618), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3900, 38.4200), expand = c(0, 0))
dev.off()
p <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.8020, -110.7618), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3900, 38.4200), expand = c(0, 0))
p
ggplotly(p)
str(RL)
library(ggplotly)
install.packages("ggplotly")
library(ggplotly)
install.packages("ggplotly", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(ggplotly)
install.packages("ggplotly", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(ggplotly)
install.packages("ggplotly", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(ggplotly)
install.packages('ggplotly', dependencies=TRUE, repos='http://cran.rstudio.com/')
options(repos='http://cran.rstudio.com/')
install.packages('ggplotly', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('ggplotly', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
browseVignettes("Sushi")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Sushi", version = "3.8")
browseVignettes("Sushi")
testScatter <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
View(testScatter)
rm(testScatter)
dat <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
str(dat)
ggplotly(dat)
library(ggplot2)
library(plotly)
g <- ggplot(dat)
g
dat
ggplot(dat) + geom_point()
g <- ggplot(dat, aes(x=OrfCoverage, y=VIGACoverage)) + geom_point()
g
ggplotly(g)
dev.off()
rm(list=ls())
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
g <- ggplot(dat, aes(x=OrfCoverage, y=VIGACoverage)) + geom_point()
ggplotly(g)
str(dat)
rm(list=ls())
dev.off()
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
g <- ggplot(dat, aes(x=OrfCoverage, y=VIGACoverage)) + geom_point()
ggplotly(g)
ContigLengths <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
View(ContigLengths)
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
str(dat)
View(dat)
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + geom_bar(position = "dodge")
str(dat)
summary(dat$Length)
ggplot(df, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge')
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge')
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', binwidth=100)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', binwidth=10)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', binwidth=30)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=300)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=3)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
rm(list=ls())
dev.off()
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths.csv")
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
ggplotly(g)
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=5)
g
dev.off()
ggplot(dat, aes(fill=Group, y=Group, x=Length)) +
geom_bar( stat="identity")
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='identity', bins=5)
g
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='identity', bins=10)
g
ggplotly(g)
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='identity', bins=50)
g
head(dat)
summary(dat$KU)
library(dplyr)
dat %>% filter(Group=="U")
kuDat <- dat %>% filter(Group=="KU")
nrow(uDat)
uDat <- dat %>% filter(Group=="U")
kuDat <- dat %>% filter(Group=="KU")
nrow(uDat)
nrow(kuDat)
summary(uDat$Length)
summary(kuDat$Length)
setwd("~/VisualizationMethods/ReproducibleFigures")
library(bigPint)
load("data/kidneyLiver.rda")
dat <- data
dat <- dat[,1:7]
dat[,-1] <- log(dat[,-1]+1)
load("data/add1_metrics.rda")
app <- plotLitreApp(data = dat, dataMetrics = metrics, pointColor = '#FF34B3')
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
citation("bigPint")
??stats
??hclust
??cutree
library(bigPint)
data("soybean_cn_sub")
soybean_cn_sub <- soybean_cn_sub[,1:7]
app <- plotSMApp(data=soybean_cn_sub)
if (interactive()) {
shiny::runApp(app)
}
library(bigPint)
data("soybean_cn_sub")
soybean_cn_sub <- soybean_cn_sub[,c(1,2,3,5,6)]
app <- plotSMApp(data=soybean_cn_sub)
if (interactive()) {
shiny::runApp(app)
}
RVersion()
R_Version()
R.Version()
install.packages("ggenealogy")
packageVersion("ggenealogy")
## Load and examine the structure of the example soybean genealogy
## dataset (called sbGeneal)
library("ggenealogy")
library("dplyr")
data("sbGeneal", package = "ggenealogy")
str(sbGeneal)
## Load and examine the structure of the example academic statistician
## genealogy dataset (called statGeneal)
data("statGeneal", package = "ggenealogy")
dim(statGeneal)
colnames(statGeneal)
## Remove blank parent rows for calculations
statGenealEP <- statGeneal %>% filter(parent != "")
statIG <- dfToIG(statGenealEP)
## Unique indivudals in the statistician dataset
uCP <- na.omit(c(statGeneal$child, statGeneal$parent))
length(unique(uCP[uCP != ""]))
## Unique children and parents in the statistician dataset
uChild <- unique(na.omit(statGeneal$child))
uParent <- unique(na.omit(statGeneal$parent))
nrow(na.omit(summarise(group_by(statGeneal,child))))
nrow(na.omit(summarise(group_by(statGeneal,parent))))
## Number of parents per child in the statistician dataset
table(summarise(group_by(statGenealEP,child), cPC = sum(!is.na(parent)))$cPC)
## Number of unique parent-chlid relationships in the statistician dataset
getBasicStatistics(statIG)$numEdges
## Convert our example soybean genealogy dataset (called sbGeneal)
## into an igraph object:
sbIG <- dfToIG(sbGeneal)
sbIG
## Obtain basic summary statistics about the igraph object
getBasicStatistics(sbIG)
## Determine shortest path of parent-child relationships between two
## labels of interest ("Tokyo" and "Narow")
pathTN <- getPath("Tokyo", "Narow", sbIG, sbGeneal, "devYear")
pathTN
## Plot returned path
plotPath(pathTN, sbGeneal, "devYear")
## Do the same for a different pair of two labels of interest
## ("Bedford" and "Zane"). First, we can determine the years these two
## labels were identified
getVariable("Bedford", sbGeneal, "devYear")
getVariable("Zane", sbGeneal, "devYear")
## Next, we can determine the shortest path of parent-child
## relationships between these two labels of interest and plot it.
pathBZ <- getPath("Bedford", "Zane", sbIG, sbGeneal, "devYear")
plotPath(pathBZ, sbGeneal, "devYear", fontFace = 2) + ggplot2::xlab("Development Year")
## Here, we demonstrate plotting paths on a filtered dataset, where
## all observations contain a non-NA value for yield. We show one
## example where there is one variable plotted for the path (yield)
## and another example where there are two variables plotted for the
## path (yield and devYear)
sbFilt <- sbGeneal[complete.cases(sbGeneal[1:3]), ]
sbFiltIG <- dfToIG(sbFilt)
pathCL <- getPath("Clark", "Lawrence", sbFiltIG, sbFilt, "yield")
plotPath(pathCL, sbFilt, "yield") + ggplot2::xlab("Yield")
pathCL2 <- getPath("Clark", "Lawrence", sbFiltIG, sbFilt, "devYear")
plotPath(pathCL2, sbFilt, "devYear", "yield") + ggplot2::xlab("Development Year") + ggplot2::ylab("Yield")
## In the previous section, we obtained the shortest path between the
## the pair of labels "Tokyo" and "Narow" and saved it as a variable
## pathTN. Here, we can plot that path superimposed over all labels in
## the example soybean genealogy dataset.
plotPathOnAll(pathTN, sbGeneal, sbIG, "devYear", bin = 3, pathEdgeCol = "red", nodeSize = 2.5, pathNodeSize = 4) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 12), axis.title = ggplot2::element_text(size = 12))
## We can repeat this process, only now instead of setting the bin
## variable to 1:3 (as we did earlier), we can set it to 1:6.
plotPathOnAll(pathTN, sbGeneal, sbIG, "devYear", bin = 6, pathEdgeCol = "seagreen2", nodeSize = 1, pathNodeSize = 3) +
ggplot2::xlab("Development Year")
## We now plot the path across all values in the filtered data
## frame. We again demonstrate this plotting tool with one variable
## plotted for the path (yield) and another example where there are
## two variables plotted for the path (yield and devYear)
plotPathOnAll(pathCL, sbFilt, sbFiltIG, "yield", bin = 3, pathEdgeCol = "purple") + ggplot2::xlab("Yield")
plotPathOnAll(pathCL, sbFilt, sbFiltIG, "yield", "devYear", pathEdgeCol = "orange") + ggplot2::xlab("Yield") + ggplot2::ylab("Development Year")
## As is explained in the article, only the top part of Figure 6 (the
## figure from this section) is produced by ggenealogy code. In
## contrast, the bottom part of Figure 6 was produced by tools outside
## of ggenealogy for didactic purposes. Below, we recreate the top
## part of Figure 6, which was to generate a plot of the ancestors and
## descendants of the label Lee.
plotAncDes("Lee", sbGeneal, mAnc = 6, mDes = 6, vCol = "blue")
## We can plot the distance matrix for a set of 10 varieties.
varieties <- c("Brim", "Bedford", "Calland", "Dillon", "Hood", "Narow", "Pella", "Tokyo", "Young", "Zane")
plotDegMatrix(varieties, sbIG, sbGeneal) +
ggplot2::scale_fill_continuous(low = "white", high = "darkgreen") +
ggplot2::theme(legend.title = ggplot2::element_text(size = 15), legend.text = ggplot2::element_text(size = 15)) +
ggplot2::labs(x = "Variety", y = "Variety")
## We can now explore some of the plotting functions in ggenealogy,
## only now with the academic statistican genealogy dataset. This
## second example dataset is much larger than the first example
## dataset of soybean genealogy. For example purposes, we would like
## to view the ancestor and descendant plot for the individual who has
## the largest number of descendants. To identify the name of this
## individual, we run the following code:
library("dplyr")
indVec <- getNodes(statGeneal)
indVec <- indVec[which(indVec != "", )]
dFunc <- function(var) nrow(getDescendants(var, statGeneal, gen = 100))
numDesc <- sapply(indVec, dFunc)
table(numDesc)
which(numDesc == 159)
## We see the individual with the largest number of descendants is Sir
## David Cox, who has 159 descendants. Now, we can plot the
## "ancestors" and "descendants" of Sir David Cox.
plotAncDes("David Cox", statGeneal, mAnc = 6, mDes = 6, vCol = "blue")
## It seems that of the 42 "children" of Sir David Cox, the one who
## went on to have the largest number of "children" of his own was
## Peter Bloomfield. We can verify below that Peter Bloomfield had 26
## "children" and 49 "descendants".
length(getChild("Peter Bloomfield", statGeneal))
nrow(getDescendants("Peter Bloomfield", statGeneal, gen = 100))
## It would be of interest now to examine the shortest path between
## Sir David Cox and one of his newest "descendants" Petra Buzkova. To
## do so, we first need to obtain the corresponding igraph object of
## the example academic statistican genealogy dataset.
statIG <- dfToIG(statGeneal)
pathCB <- getPath("David Cox", "Petra Buzkova", statIG, statGeneal, "gradYear", isDirected = FALSE)
## After doing so, we can now determine the shortest path between Sir
## David Cox and Petra Buzkova, and plot it.
plotPath(pathCB, statGeneal, "gradYear", fontFace = 4) +
ggplot2::xlab("Graduation Year") +
ggplot2::theme(axis.text = ggplot2::element_text(size = 10), axis.title = ggplot2::element_text(size = 10)) +
ggplot2::scale_x_continuous(expand = c(.1, .2))
## We can now superimpose this shortest path between Sir David Cox and
## Petra Buzkova across the entire genealogical structure.
plotPathOnAll(pathCB, statGeneal, statIG, "gradYear", bin = 200) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 8), axis.title = ggplot2::element_text(size = 8)) +
ggplot2::scale_x_continuous(expand = c(.1, .2)) +
ggplot2::xlab("Graduation Year")
## We notice, however, that we cannot read the text of the nodes on
## the path of interest. To solve this problem, we can create the same
## plot, only now specifying that any nodes that are not on our path
## of interest are deemphasized with smaller text.
plotPathOnAll(pathCB, statGeneal, statIG, "gradYear", bin = 200, nodeSize = .5, pathNodeSize = 2.5, nodeCol = "darkgray", edgeCol = "lightgray") +
ggplot2::theme(axis.text = ggplot2::element_text(size = 8), axis.title = ggplot2::element_text(size = 8)) +
ggplot2::scale_x_continuous(expand = c(.1, .2)) +
ggplot2::xlab("Graduation Year")
## Even though we can now read the text labels on the path of
## interest, we lost the ability to read labels that are not on our
## path of interest. At this point, we can keep the best of both
## worlds: We can create a plot that demphasizes the nodes that are
## not on the path of interest by assigning them small text font size,
## but incoroporate an interactive function so that we can hover over
## these non-path nodes if we wish to obtain their label
## information. This is the plot we used and interacted with to create
## the video embedded in Figure 12.
plotPathOnAll(pathCB, statGeneal, statIG, "gradYear", bin = 200, nodeSize = .5, pathNodeSize = 2.5, nodeCol = "darkgray", edgeCol = "lightgray", animate = TRUE)
## Here, we plot the filtered data frame of the soy bean data with one
## and two variables, respectively, when the animation is turned on.
plotPathOnAll(pathCL, sbFilt, sbFiltIG, "yield", pathEdgeCol = "orange", animate = TRUE)
try(plotPathOnAll(pathCL, sbFilt, sbFiltIG, "yield", "devYear", pathEdgeCol = "orange", animate = TRUE))
## We can demonstrate the getBranchQuant() function by examining the
## quantitative variable ``yield" across the descendant branches of
## the soybean variety A.K.
AKBranchYield <- getBranchQuant("A.K.", sbGeneal, "yield", 15)
select(AKBranchYield, -DesNames)
## We can examine the mean graduation year for the ``descendant"
## branches of the academic statistician David Cox
CoxBranchYear <- getBranchQuant("David Cox", statGeneal, "gradYear", 15)
head(select(CoxBranchYear, -DesNames), 10)
## We can demonstrate the getBranchQual() function by examining the
## qualitative variable ``thesis" across the ``descendant" branches of
## the academic statistician David Cox
v1 <- "David Cox"; geneal <- statGeneal; colName <- "thesis"; gen <- 15
rExpr <- "grepl('(?i)Stochastic', geneal$colName)"
CoxBranchStochastic <- getBranchQual(v1, geneal, colName, rExpr, gen)
head(select(CoxBranchStochastic, -DesNames))
## It may be interesting to examine the school that is represented the
## most among all descendants of David Cox. Below, we determine what
## school this is.
desDC <- getDescendants("David Cox", statGeneal, 15)
tableDC <- table(statGeneal[match(desDC$label, statGeneal$child), ]$school)
tail(sort(tableDC), 5)
## We can now determine which of the branches from the 42 ``children"
## of David Cox have the largest proportion of ``descendants"
## graduating from the University of London.
colName <- "school"
rExpr <- "geneal$colName == 'University of London'"
DCBranchUL <- getBranchQual(v1, geneal, colName, rExpr, gen)
head(select(DCBranchUL, -DesNames))
## We show that 34 of the ``descendants" of David Cox that graduated
## from the University of London were direct ``children" of him
DCChild <- statGeneal[match(getChild("David Cox", statGeneal), statGeneal$child), ]
sum(DCChild$school == "University of London")
dev.off()
dev.off()
## Remove blank parent rows for calculations
statGenealEP <- statGeneal %>% filter(parent != "")
statIG <- dfToIG(statGenealEP)
## Unique indivudals in the statistician dataset
uCP <- na.omit(c(statGeneal$child, statGeneal$parent))
length(unique(uCP[uCP != ""]))
## Unique children and parents in the statistician dataset
uChild <- unique(na.omit(statGeneal$child))
uParent <- unique(na.omit(statGeneal$parent))
nrow(na.omit(summarise(group_by(statGeneal,child))))
nrow(na.omit(summarise(group_by(statGeneal,parent))))
## Number of unique parent-chlid relationships in the statistician dataset
getBasicStatistics(statIG)$numEdges
setwd("~/Desktop/Projects/GenomeBiology/bigPintPaper/Pseudocode")
setwd("~/Desktop/Projects/BMCBioinformatics/DiffExPaper")
setwd("~/Desktop/Projects/BMCBioinformatics/DiffExPaper")
setwd("~/Desktop/Projects/GenomeBiology/Psuedocode")
setwd("~/Desktop/Projects/GenomeBiology/bigPintPaper")
setwd("~/Desktop/Projects/GenomeBiology/bigPintPaper/Pseudocode")
setwd("~/bigPint")
library(devtools)
install()
document()
install(); document()
check()
build_vignettes()
build_vignettes()
check()
install()
document()
install()
document()
setwd("~/Desktop/Projects/GenomeBiology")
setwd("~/Desktop/Projects/GenomeBiology/bigPintPaper")
